// <auto-generated />
using System;
using BudgetPlanner.Data.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BudgetPlanner.Data.SqliteMigrations.Migrations
{
    [DbContext(typeof(BudgetPlannerDbContext))]
    [Migration("20241007191248_DbStructureToHaveRelationsFurtherChanges")]
    partial class DbStructureToHaveRelationsFurtherChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.BudgetCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AvailableFunds")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("GoalCompletionDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MonthlyStart")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SavingsGoal")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BudgetCategories");
                });

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.Debt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FinalPaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MonthlyPayment")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PayOffGoal")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Debts");
                });

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.HouseholdMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Income")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("HouseholdMembers");
                });

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.OpenBankingAccessToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExpiresIn")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OpenBankingAccessTokens");
                });

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.OpenBankingAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OpenBankingAccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("OpenBankingAccounts");
                });

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.OpenBankingAccountBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Available")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Current")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("OpenBankingAccountBalances");
                });

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.OpenBankingDirectDebit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OpenBankingDirectDebitId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PreviousPaymentAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PreviousPaymentTimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("OpenBankingDirectDebits");
                });

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.OpenBankingProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Logo")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OpenBankingProviderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OpenBankingProviders");
                });

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.OpenBankingProviderScopes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("OpenBankingProviderScopes");
                });

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.OpenBankingStandingOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FinalPaymentAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FinalPaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FirstPaymentAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FirstPaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NextPaymentAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NextPaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Payee")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("OpenBankingStandingOrders");
                });

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.OpenBankingSynronisation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OpenBankingAccountId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SyncronisationTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("SyncronisationType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OpenBankingAccountId");

                    b.HasIndex("ProviderId");

                    b.ToTable("OpenBankingSyncronisations");
                });

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.OpenBankingTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Pending")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionCategory")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ProviderId");

                    b.ToTable("OpenBankingTransactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Xml")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.OpenBankingAccount", b =>
                {
                    b.HasOne("BudgetPlanner.Client.Data.Models.OpenBankingProvider", "Provider")
                        .WithMany("Accounts")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.OpenBankingAccountBalance", b =>
                {
                    b.HasOne("BudgetPlanner.Client.Data.Models.OpenBankingAccount", "Account")
                        .WithOne("AccountBalance")
                        .HasForeignKey("BudgetPlanner.Client.Data.Models.OpenBankingAccountBalance", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.OpenBankingDirectDebit", b =>
                {
                    b.HasOne("BudgetPlanner.Client.Data.Models.OpenBankingAccount", "Account")
                        .WithMany("DirectDebits")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.OpenBankingProviderScopes", b =>
                {
                    b.HasOne("BudgetPlanner.Client.Data.Models.OpenBankingProvider", "Provider")
                        .WithMany("Scopes")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.OpenBankingStandingOrder", b =>
                {
                    b.HasOne("BudgetPlanner.Client.Data.Models.OpenBankingAccount", "Account")
                        .WithMany("StandingOrders")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.OpenBankingSynronisation", b =>
                {
                    b.HasOne("BudgetPlanner.Client.Data.Models.OpenBankingAccount", null)
                        .WithMany("Syncronisations")
                        .HasForeignKey("OpenBankingAccountId");

                    b.HasOne("BudgetPlanner.Client.Data.Models.OpenBankingProvider", "Provider")
                        .WithMany("Syncronisations")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.OpenBankingTransaction", b =>
                {
                    b.HasOne("BudgetPlanner.Client.Data.Models.OpenBankingAccount", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BudgetPlanner.Client.Data.Models.OpenBankingProvider", "Provider")
                        .WithMany("Transactions")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.OpenBankingAccount", b =>
                {
                    b.Navigation("AccountBalance");

                    b.Navigation("DirectDebits");

                    b.Navigation("StandingOrders");

                    b.Navigation("Syncronisations");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BudgetPlanner.Client.Data.Models.OpenBankingProvider", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Scopes");

                    b.Navigation("Syncronisations");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
